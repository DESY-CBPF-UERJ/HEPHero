MakeList.txt
Include, src
HEPAnalysis.h

https://gitlab.cern.ch/hepmc/HepMC

-> Loop event:
HepMC::GenEvent* evt = ascii_in.read_next_event();
while ( evt ) {
    
    delete evt;
    ascii_in >> evt;
}

-> Loop particles:
for ( HepMC::GenEvent::particle_const_iterator p = evt->particles_begin(); p != evt->particles_end(); ++p ){

}

-> Loop vertices:
for ( HepMC::GenEvent::vertex_const_iterator v = evt->vertices_begin(); v != evt->vertices_end(); ++v ){

}

-> Declare input and output files
HepMC::IO_GenEvent ascii_in("ana/testHepMC.input",std::ios::in);
HepMC::IO_GenEvent ascii_out("ana/testHepMC.output",std::ios::out);

-> Store event in output file
ascii_out << evt;

-> Extract event information
evt->event_number()
evt->signal_process_id() ???


-> Extract particle information
(*p)->print()
(*p)->momentum().perp()
(*p)->momentum().m()
(*p)->momentum().eta()
(*p)->momentum().phi()
(*p)->momentum().px()
(*p)->momentum().py()
(*p)->momentum().pz()
(*p)->momentum().e()
(*p)->status()  # 1-stateFinal
(*p)->generated_mass()  # equal to (*p)->momentum().m() rounded
(*p)->pdg_id()

IMPORTANT: Herwig corrects the momentum of the particles going to the final state. Don't use kinematic info from not final state particles for physical studies!


-> Extract vertex information
(*v)->print()
(*v)->position().x()
(*v)->position().y()
(*v)->position().z()
(*v)->position().t()
(*v)->id()
(*v)->weights()


-> List of objects
std::list<HepMC::GenVertex*> allvertices;
for ( HepMC::GenEvent::vertex_const_iterator v = evt->vertices_begin(); v != evt->vertices_end(); ++v ) {
    allvertices.push_back(*v);
}


-> Function to be used in event selection
class IsEventGood {
public:
    /// check this event for goodness
    bool operator()( const HepMC::GenEvent* evt ) {
        for ( HepMC::GenEvent::particle_const_iterator p = evt->particles_begin(); p != evt->particles_end(); ++p ){
            if ( (*p)->pdg_id() == 22 && (*p)->momentum().perp() > 25. ) {
                return 1;
            }
        }
    return 0;
    }
};


-> These are the accepted status code definitions for HepMC:
• 0 : an empty entry with no meaningful information and therefore to be skipped unconditionally
• 1 : a final-state particle, i.e. a particle that is not decayed further by the generator (may also include
unstable particles that are to be decayed later, as part of the detector simulation). Such particles must
always be labelled ’1’.
• 2 : decayed Standard Model hadron or tau or mu lepton, excepting virtual intermediate states thereof
(i.e. the particle must undergo a normal decay, not e.g. a shower branching). Such particles must
always be labelled ’2’. No other particles can be labelled ’2’.
• 3 : a documentation entry
• 4 : an incoming beam particle
• 5-10 : undefined, reserved for future standards
• 11-200: an intermediate (decayed/branched/...) particle that does not fulfill the criteria of status code
2, with a generator-dependent classification of its nature.
• 201- : at the disposal of the user, in particular for event tracking in the detector



-> Since Herwig++ 2.4.0, we assign status codes according to this scheme:
0 : an empty entry, with no meaningful information and therefore to be skipped unconditionally
1 : a final-state particle, i.e. a particle that is not decayed further by the generator (may also include 
unstable particles that are to be decayed later, as part of the detector simulation). Such particles must 
always be labelled ‘1’.
2 : a decayed Standard Model hadron or tau or mu lepton, excepting virtual intermediate states thereof 
(i.e. the particle must undergo a normal decay, not e.g. a shower branching). Such particles must 
always be labelled ‘2’. No other particles can be labelled ‘2’.
3 : a documentation entry
4 : an incoming beam particle
11 - 200 : an intermediate (decayed/branched/…) particle that does not fulfill the criteria of status code 2, 
with a generator-dependent classification of its nature. For now we are not making any further distinction in 
the 11-200 range, everything that cannot be 1, 2 or 4 will be labelled 11. 0 and 3 are not used.


-> Line Keys
• E: general GenEvent information
• N: named weights
• U: momentum and position units
• C: GenCrossSection information: This line will appear ONLY if GenCrossSection is defined.
• H: HeavyIon information: This line will contain zeros if there is no associated HeavyIon object.
• F: PdfInfo information: This line will contain zeros if there is no associated PdfInfo object.
• V: GenVertex information
• P: GenParticle information

HepMC::Version 2.06.00
HepMC::IO_GenEvent-START_EVENT_LISTING
E 1 65 -1.0000000000000000e+00 -1.0000000000000000e+00 -1.0000000000000000e+00 20 0 357 1 2 0 3 3.4560000000000002e-01 9.8595999999999995e-01 9.8563000000000001e-01
N 3 "0" "second weight name" "weightName"
U GEV MM
C 3.3260000000000000e-03 1.0000000000000000e-04

H 23 11 12 15 3 5 0 0 0 1.4499999582767487e-02 0 0 0
F 2 3 3.5000000000000003e-01 6.4999999999999991e-01 8.4499999999999993e+00 2.4499999779912355e+03 4.5499999591265787e+03 230 230

V -3 0 0 0 0 0 0 16 0
P 5 -2 2.3521174508664416e+01 1.8678188979510526e+01 -1.0865544244230507e+00 3.0054966217558558e+01 0 3 0 0 -5 0





//! example class

/// \class  IsW_Boson
/// this predicate returns true if the input particle is a W+/W-
class IsW_Boson {
public:
    /// returns true if the GenParticle is a W
    bool operator()( const HepMC::GenParticle* p ) {
	if ( abs(p->pdg_id()) == 24 ) return 1;
	return 0;
    }
};

//! example class

/// \class  IsStateFinal
/// this predicate returns true if the input has no decay vertex
class IsStateFinal {
public:
    /// returns true if the GenParticle does not decay
    bool operator()( const HepMC::GenParticle* p ) {
	if ( !p->end_vertex() && p->status()==1 ) return 1;
	return 0;
    }
};


IsW_Boson isw;
for ( HepMC::GenEvent::particle_iterator p = evt->particles_begin(); p != evt->particles_end(); ++p ) {
    if ( isw(*p) ) {
        std::cout << "A W boson has been found: " << std::endl;
        (*p)->print();
        
        // return all parents
        // we do this by pointing to the production vertex of the W
        // particle and asking for all particle parents of that vertex
        std::cout << "\t Its parents are: " << std::endl;
        if ( (*p)->production_vertex() ) {
            for ( HepMC::GenVertex::particle_iterator mother = (*p)->production_vertex()->particles_begin(HepMC::parents); mother != (*p)->production_vertex()->particles_end(HepMC::parents); ++mother ) {
                std::cout << "\t";
                (*mother)->print();
            }
        }
        
        // return all descendants
        // we do this by pointing to the end vertex of the W
        // particle and asking for all particle descendants of that vertex
        std::cout << "\t\t Its descendants are: " << std::endl;
        if ( (*p)->end_vertex() ) {
            for ( HepMC::GenVertex::particle_iterator des = (*p)->end_vertex()->particles_begin(HepMC::descendants); des != (*p)->end_vertex()->            particles_end(HepMC::descendants); ++des ) {
                std::cout << "\t\t";
                (*des)->print();
            }
        }
    }
}



















for (auto p: evt->particles()) {
...
}


for (size_t i=0;i<evt->particles().size();++i) {
...
evt->particles().at(i)
...
}





























